#!/bin/bash
set -e

# Deploy Staging Environment Script
# This script deploys the staging environment on both laptop and server

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
BACKUP_DIR="$PROJECT_ROOT/backups/staging"
LOGS_DIR="$PROJECT_ROOT/logs/staging"

# Create necessary directories
mkdir -p "$BACKUP_DIR" "$LOGS_DIR"

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOGS_DIR/deploy-$(date +%Y%m%d).log"
}

# Success logging
log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1" | tee -a "$LOGS_DIR/deploy-$(date +%Y%m%d).log"
}

# Error logging
log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" | tee -a "$LOGS_DIR/deploy-$(date +%Y%m%d).log"
}

# Warning logging
log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1" | tee -a "$LOGS_DIR/deploy-$(date +%Y%m%d).log"
}

# Detect environment (laptop vs server)
detect_environment() {
    log "Detecting environment..."
    
    # Check if we're on a laptop (common laptop indicators)
    if [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
        ENVIRONMENT="server"
    elif [[ "$(uname -s)" == "Darwin" ]] && [[ -d "/Users" ]]; then
        ENVIRONMENT="laptop"
    elif [[ "$(uname -s)" == "Linux" ]] && [[ -n "$DISPLAY" ]]; then
        ENVIRONMENT="laptop"
    else
        ENVIRONMENT="server"
    fi
    
    log "Detected environment: $ENVIRONMENT"
}

# Create environment configuration
create_env_config() {
    log "Creating environment configuration..."
    
    local env_file="$PROJECT_ROOT/.env"
    
    # Copy base staging configuration
    if [[ ! -f "$env_file" ]]; then
        log "Creating .env file from template..."
        cat > "$env_file" << 'EOF'
# Staging Environment Configuration
# Generated by deploy-staging.sh

# Project Configuration
COMPOSE_PROJECT_NAME=pa-staging
ENVIRONMENT=staging

# Database Configuration
POSTGRES_PASSWORD=staging_password_123
POSTGRES_PORT=5432

# Supabase Configuration (use staging keys)
SUPABASE_ANON_KEY=your_staging_supabase_anon_key_here
SUPABASE_SERVICE_KEY=your_staging_supabase_service_key_here

# n8n Configuration
N8N_ENCRYPTION_KEY=your_staging_n8n_encryption_key_here
N8N_WEBHOOK_URL=http://localhost:5678/webhook
WEBHOOK_URL=http://localhost:5678/webhook

# API Keys (use same as production for testing)
OPENAI_API_KEY=${OPENAI_API_KEY}
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
GEMINI_API_KEY=${GEMINI_API_KEY}

# Slack Configuration (use staging tokens)
SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
LETTA_AGENT_ID=${LETTA_AGENT_ID}

# Service Configuration
LETTA_DEBUG=true
OPENWEBUI_LOG_LEVEL=DEBUG
ENABLE_TAGS_GENERATION=true
ENABLE_TITLE_GENERATION=true
TASK_MODEL=gpt-4o-mini
TASK_MODEL_EXTERNAL=false
ENABLE_OLLAMA_API=false
OLLAMA_BASE_URL=http://localhost:11434
RAG_EMBEDDING_ENGINE=openai
RAG_EMBEDDING_MODEL=text-embedding-ada-002
ENABLE_WEB_SEARCH=true
WEB_SEARCH_ENGINE=tavily
AUDIO_STT_ENGINE=openai

# External Services
TAVILY_API_KEY=${TAVILY_API_KEY}
LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}

# Network Configuration
EOF
    fi
    
    # Add environment-specific overrides
    if [[ "$ENVIRONMENT" == "laptop" ]]; then
        log "Adding laptop-specific configuration..."
        cat >> "$env_file" << 'EOF'

# Laptop-specific overrides
RESOURCE_LIMITS_CPU=2
RESOURCE_LIMITS_MEMORY=4g
DISABLE_HEAVY_SERVICES=false
STAGING_MODE=true
EOF
    fi
    
    log_success "Environment configuration created"
}

# Stop existing staging environment
stop_staging() {
    log "Stopping existing staging environment..."
    
    if docker-compose -f "$PROJECT_ROOT/docker-compose.staging.yml" ps -q | grep -q .; then
        docker-compose -f "$PROJECT_ROOT/docker-compose.staging.yml" down
        log_success "Existing staging environment stopped"
    else
        log "No existing staging environment found"
    fi
}

# Deploy staging environment
deploy_staging() {
    log "Deploying staging environment..."
    
    # Change to project root
    cd "$PROJECT_ROOT"
    
    # Start staging environment
    docker-compose -f docker-compose.staging.yml up -d
    
    log_success "Staging environment deployed"
}

# Wait for services to be ready
wait_for_services() {
    log "Waiting for services to be ready..."
    
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        log "Health check attempt $attempt/$max_attempts..."
        
        # Check if all services are healthy
        local unhealthy_services=$(docker-compose -f "$PROJECT_ROOT/docker-compose.staging.yml" ps --format json | jq -r '.[] | select(.State != "running") | .Name' | wc -l)
        
        if [[ $unhealthy_services -eq 0 ]]; then
            log_success "All services are healthy"
            return 0
        fi
        
        sleep 10
        ((attempt++))
    done
    
    log_error "Services did not become healthy within expected time"
    return 1
}

# Sync production data
sync_production_data() {
    log "Syncing production data to staging..."
    
    # Check if we have access to production data
    if [[ -f "$PROJECT_ROOT/.env.production" ]]; then
        log "Found production environment file, syncing data..."
        
        # Run data sync script if it exists
        if [[ -f "$SCRIPT_DIR/sync-production-data.sh" ]]; then
            "$SCRIPT_DIR/sync-production-data.sh"
            log_success "Production data synced to staging"
        else
            log_warning "Data sync script not found, skipping data sync"
        fi
    else
        log_warning "No production environment found, skipping data sync"
    fi
}

# Display staging environment status
show_status() {
    log "Staging environment status:"
    echo ""
    
    # Show running services
    docker-compose -f "$PROJECT_ROOT/docker-compose.staging.yml" ps
    
    echo ""
    log "Access URLs:"
    echo "  - Letta: http://localhost:8283"
    echo "  - Open WebUI: http://localhost:8080"
    echo "  - n8n: http://localhost:5678"
    echo "  - Supabase Studio: http://localhost:3000"
    echo "  - Neo4j: http://localhost:7474"
    echo "  - Health Monitor: http://localhost:8083"
    
    if [[ "$ENVIRONMENT" == "laptop" ]]; then
        echo ""
        log "Laptop-specific access:"
        echo "  - Database: localhost:5432 (postgres/staging_password_123)"
    fi
}

# Main execution
main() {
    log "Starting staging environment deployment..."
    log "Project root: $PROJECT_ROOT"
    log "Environment: $ENVIRONMENT"
    
    # Detect environment
    detect_environment
    
    # Create environment configuration
    create_env_config
    
    # Stop existing staging environment
    stop_staging
    
    # Deploy staging environment
    deploy_staging
    
    # Wait for services to be ready
    if wait_for_services; then
        # Sync production data
        sync_production_data
        
        # Show status
        show_status
        
        log_success "Staging environment deployment completed successfully!"
    else
        log_error "Staging environment deployment failed"
        exit 1
    fi
}

# Help function
show_help() {
    echo "Deploy Staging Environment Script"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -e, --env ENV  Override environment detection (laptop|server)"
    echo ""
    echo "This script deploys a staging environment for testing upgrades."
    echo "It automatically detects whether it's running on laptop or server"
    echo "and configures the environment accordingly."
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -e|--env)
            ENVIRONMENT="$2"
            shift 2
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Run main function
main
