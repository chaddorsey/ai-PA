#!/bin/bash

# TLS/SSL Configuration Manager for PA Ecosystem
# Manages TLS/SSL configurations, cipher suites, and protocol enforcement

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
TLS_CONFIG_DIR="$PROJECT_ROOT/config/tls"
NGINX_CONFIG_DIR="$PROJECT_ROOT/config/nginx"
DOCKER_CONFIG_DIR="$PROJECT_ROOT/config/docker"

# TLS Configuration
TLS_VERSION="1.3"
CIPHER_SUITES_TLS13="TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256"
CIPHER_SUITES_TLS12="ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256"
PROTOCOLS="TLSv1.2 TLSv1.3"
HSTS_MAX_AGE=31536000
OCSP_STAPLING=true

# Logging
LOG_FILE="$PROJECT_ROOT/logs/certificates/tls-config.log"
mkdir -p "$(dirname "$LOG_FILE")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" | tee -a "$LOG_FILE"
}

# Generate TLS configuration files
generate_tls_configs() {
    log "Generating TLS/SSL configuration files..."
    
    # Create nginx TLS configuration
    cat > "$NGINX_CONFIG_DIR/tls.conf" << EOF
# TLS/SSL Configuration for PA Ecosystem
# Generated by TLS Configuration Manager

# SSL Configuration
ssl_protocols $PROTOCOLS;
ssl_ciphers $CIPHER_SUITES_TLS13:$CIPHER_SUITES_TLS12;
ssl_prefer_server_ciphers off;

# SSL Session Configuration
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
ssl_session_tickets off;

# OCSP Stapling
ssl_stapling $OCSP_STAPLING;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

# HSTS Configuration
add_header Strict-Transport-Security "max-age=$HSTS_MAX_AGE; includeSubDomains; preload" always;

# Security Headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https:; frame-ancestors 'none';" always;

# SSL Certificate Configuration
ssl_certificate /etc/ssl/certs/pa-ecosystem.crt;
ssl_certificate_key /etc/ssl/private/pa-ecosystem.key;

# DH Parameters (if using DHE ciphers)
# ssl_dhparam /etc/ssl/certs/dhparam.pem;
EOF

    # Create OpenSSL configuration
    cat > "$TLS_CONFIG_DIR/openssl.conf" << EOF
# OpenSSL Configuration for PA Ecosystem
# Generated by TLS Configuration Manager

[req]
default_bits = 4096
prompt = no
distinguished_name = req_distinguished_name
req_extensions = v3_req
x509_extensions = v3_ca

[req_distinguished_name]
C = US
ST = California
L = San Francisco
O = PA Ecosystem
OU = IT Department
CN = pa-ecosystem.local

[v3_req]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[v3_ca]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:TRUE, pathlen:0
keyUsage = critical, digitalSignature, keyCertSign

[alt_names]
DNS.1 = pa-ecosystem.local
DNS.2 = *.pa-ecosystem.local
DNS.3 = api.pa-ecosystem.local
DNS.4 = app.pa-ecosystem.local
DNS.5 = admin.pa-ecosystem.local
IP.1 = 127.0.0.1
IP.2 = ::1
EOF

    # Create Docker Compose TLS override
    cat > "$DOCKER_CONFIG_DIR/docker-compose.tls.yml" << EOF
# Docker Compose TLS Override for PA Ecosystem
# Generated by TLS Configuration Manager

version: '3.8'

services:
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/tls.conf:/etc/nginx/conf.d/tls.conf:ro
      - ./tls/live:/etc/ssl/certs:ro
      - ./tls/live:/etc/ssl/private:ro
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"

  # TLS-enabled backend services
  backend:
    environment:
      - TLS_ENABLED=true
      - TLS_CERT_PATH=/etc/ssl/certs/backend.crt
      - TLS_KEY_PATH=/etc/ssl/private/backend.key
    volumes:
      - ./tls/live:/etc/ssl/certs:ro
      - ./tls/live:/etc/ssl/private:ro

  # Database with TLS
  postgres:
    environment:
      - POSTGRES_SSL_MODE=require
      - POSTGRES_SSL_CERT=/etc/ssl/certs/postgres.crt
      - POSTGRES_SSL_KEY=/etc/ssl/private/postgres.key
    volumes:
      - ./tls/live:/etc/ssl/certs:ro
      - ./tls/live:/etc/ssl/private:ro

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
EOF

    # Create TLS monitoring configuration
    cat > "$TLS_CONFIG_DIR/tls-monitoring.conf" << EOF
# TLS Monitoring Configuration for PA Ecosystem
# Generated by TLS Configuration Manager

# SSL Labs API Configuration
SSL_LABS_API_URL="https://api.ssllabs.com/api/v3/analyze"
SSL_LABS_CHECK_INTERVAL=3600  # 1 hour

# Certificate monitoring
CERT_CHECK_INTERVAL=86400     # 24 hours
CERT_EXPIRY_WARNING_DAYS=30

# TLS Configuration monitoring
TLS_CONFIG_CHECK_INTERVAL=3600  # 1 hour

# Alerting configuration
ALERT_EMAIL="admin@pa-ecosystem.local"
ALERT_WEBHOOK_URL=""

# Security thresholds
MIN_TLS_VERSION="1.2"
MAX_CERT_AGE_DAYS=90
REQUIRED_CIPHER_STRENGTH=128

# Monitoring endpoints
HEALTH_CHECK_ENDPOINTS=(
    "https://api.pa-ecosystem.local/health"
    "https://app.pa-ecosystem.local/health"
    "https://admin.pa-ecosystem.local/health"
)
EOF

    log_success "TLS configuration files generated"
}

# Generate DH parameters
generate_dh_params() {
    local dh_file="$TLS_CONFIG_DIR/dhparam.pem"
    
    if [[ ! -f "$dh_file" ]]; then
        log "Generating DH parameters (this may take a few minutes)..."
        openssl dhparam -out "$dh_file" 2048
        chmod 600 "$dh_file"
        log_success "DH parameters generated at $dh_file"
    else
        log "DH parameters already exist at $dh_file"
    fi
}

# Validate TLS configuration
validate_tls_config() {
    local config_file="$1"
    
    log "Validating TLS configuration: $config_file"
    
    if [[ ! -f "$config_file" ]]; then
        log_error "Configuration file not found: $config_file"
        return 1
    fi
    
    # Check for required TLS directives
    local required_directives=(
        "ssl_protocols"
        "ssl_ciphers"
        "ssl_certificate"
        "ssl_certificate_key"
    )
    
    for directive in "${required_directives[@]}"; do
        if ! grep -q "^$directive" "$config_file"; then
            log_error "Missing required directive: $directive"
            return 1
        fi
    done
    
    # Check for security headers
    local security_headers=(
        "Strict-Transport-Security"
        "X-Frame-Options"
        "X-Content-Type-Options"
        "Content-Security-Policy"
    )
    
    for header in "${security_headers[@]}"; do
        if ! grep -q "$header" "$config_file"; then
            log_warning "Missing security header: $header"
        fi
    done
    
    log_success "TLS configuration validation completed"
}

# Test TLS configuration
test_tls_config() {
    local domain="${1:-localhost}"
    local port="${2:-443}"
    
    log "Testing TLS configuration for $domain:$port..."
    
    # Test SSL connection
    if command -v openssl &> /dev/null; then
        echo | openssl s_client -connect "$domain:$port" -servername "$domain" 2>/dev/null | grep -E "(Protocol|Cipher|Verify return code)"
    else
        log_warning "OpenSSL not available for TLS testing"
    fi
    
    # Test with curl if available
    if command -v curl &> /dev/null; then
        curl -I -s -k "https://$domain:$port" | head -10
    else
        log_warning "curl not available for HTTP testing"
    fi
    
    log_success "TLS configuration test completed"
}

# Update TLS configuration
update_tls_config() {
    local config_type="${1:-nginx}"
    
    case "$config_type" in
        "nginx")
            generate_tls_configs
            validate_tls_config "$NGINX_CONFIG_DIR/tls.conf"
            ;;
        "openssl")
            generate_tls_configs
            validate_tls_config "$TLS_CONFIG_DIR/openssl.conf"
            ;;
        "docker")
            generate_tls_configs
            validate_tls_config "$DOCKER_CONFIG_DIR/docker-compose.tls.yml"
            ;;
        "all")
            generate_tls_configs
            generate_dh_params
            validate_tls_config "$NGINX_CONFIG_DIR/tls.conf"
            validate_tls_config "$TLS_CONFIG_DIR/openssl.conf"
            validate_tls_config "$DOCKER_CONFIG_DIR/docker-compose.tls.yml"
            ;;
        *)
            log_error "Unknown configuration type: $config_type"
            exit 1
            ;;
    esac
}

# Monitor TLS health
monitor_tls_health() {
    log "Monitoring TLS health..."
    
    local alerts=()
    
    # Check certificate expiration
    if command -v openssl &> /dev/null; then
        local cert_files=("$TLS_CONFIG_DIR/live"/*/cert.pem)
        for cert_file in "${cert_files[@]}"; do
            if [[ -f "$cert_file" ]]; then
                local expiry_date=$(openssl x509 -enddate -noout -in "$cert_file" | cut -d= -f2)
                local expiry_timestamp=$(date -d "$expiry_date" +%s)
                local current_timestamp=$(date +%s)
                local days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
                
                if [[ $days_until_expiry -lt 30 ]]; then
                    alerts+=("WARNING: Certificate expires in $days_until_expiry days: $cert_file")
                fi
            fi
        done
    fi
    
    # Check TLS configuration files
    local config_files=(
        "$NGINX_CONFIG_DIR/tls.conf"
        "$TLS_CONFIG_DIR/openssl.conf"
        "$DOCKER_CONFIG_DIR/docker-compose.tls.yml"
    )
    
    for config_file in "${config_files[@]}"; do
        if [[ ! -f "$config_file" ]]; then
            alerts+=("ERROR: Missing TLS configuration file: $config_file")
        fi
    done
    
    # Report results
    if [[ ${#alerts[@]} -gt 0 ]]; then
        log_warning "TLS health alerts detected:"
        for alert in "${alerts[@]}"; do
            log_warning "$alert"
        done
    else
        log_success "TLS health monitoring completed - no issues found"
    fi
}

# Apply TLS configuration to services
apply_tls_config() {
    local service="${1:-all}"
    
    log "Applying TLS configuration to services..."
    
    case "$service" in
        "nginx")
            if systemctl is-active --quiet nginx 2>/dev/null; then
                systemctl reload nginx
                log_success "Nginx configuration reloaded"
            else
                log_warning "Nginx is not running"
            fi
            ;;
        "docker")
            if command -v docker-compose &> /dev/null; then
                cd "$PROJECT_ROOT"
                docker-compose -f docker-compose.yml -f "$DOCKER_CONFIG_DIR/docker-compose.tls.yml" restart nginx
                log_success "Docker services restarted with TLS configuration"
            else
                log_warning "Docker Compose not available"
            fi
            ;;
        "all")
            apply_tls_config "nginx"
            apply_tls_config "docker"
            ;;
        *)
            log_error "Unknown service: $service"
            exit 1
            ;;
    esac
}

# Generate TLS security report
generate_tls_report() {
    local report_file="$TLS_CONFIG_DIR/tls-security-report-$(date +%Y%m%d).json"
    
    log "Generating TLS security report..."
    
    cat > "$report_file" << EOF
{
  "report_date": "$(date -Iseconds)",
  "tls_configuration": {
    "protocols": "$PROTOCOLS",
    "cipher_suites_tls13": "$CIPHER_SUITES_TLS13",
    "cipher_suites_tls12": "$CIPHER_SUITES_TLS12",
    "hsts_max_age": $HSTS_MAX_AGE,
    "ocsp_stapling": $OCSP_STAPLING
  },
  "certificates": [
EOF
    
    # Add certificate information
    local first=true
    local cert_files=("$TLS_CONFIG_DIR/live"/*/cert.pem)
    for cert_file in "${cert_files[@]}"; do
        if [[ -f "$cert_file" ]]; then
            if [[ "$first" == true ]]; then
                first=false
            else
                echo "," >> "$report_file"
            fi
            
            local domain=$(basename "$(dirname "$cert_file")")
            local expiry_date=$(openssl x509 -enddate -noout -in "$cert_file" | cut -d= -f2)
            local issuer=$(openssl x509 -issuer -noout -in "$cert_file" | cut -d= -f2-)
            local fingerprint=$(openssl x509 -fingerprint -noout -in "$cert_file" | cut -d= -f2)
            
            cat >> "$report_file" << EOF
    {
      "domain": "$domain",
      "expiry_date": "$expiry_date",
      "issuer": "$issuer",
      "fingerprint": "$fingerprint"
    }EOF
        fi
    done
    
    cat >> "$report_file" << 'EOF'

  ],
  "security_headers": [
    "Strict-Transport-Security",
    "X-Frame-Options", 
    "X-Content-Type-Options",
    "X-XSS-Protection",
    "Referrer-Policy",
    "Content-Security-Policy"
  ],
  "recommendations": [
    "Enable HSTS with preload directive",
    "Implement certificate pinning for critical services",
    "Regular security audits using SSL Labs API",
    "Monitor certificate expiration and auto-renewal",
    "Use TLS 1.3 for all new connections"
  ]
}
EOF
    
    log_success "TLS security report generated: $report_file"
}

# Main function
main() {
    local command="${1:-help}"
    
    case "$command" in
        "init")
            generate_tls_configs
            generate_dh_params
            ;;
        "generate")
            local config_type="${2:-all}"
            update_tls_config "$config_type"
            ;;
        "validate")
            local config_file="${2:-$NGINX_CONFIG_DIR/tls.conf}"
            validate_tls_config "$config_file"
            ;;
        "test")
            local domain="${2:-localhost}"
            local port="${3:-443}"
            test_tls_config "$domain" "$port"
            ;;
        "monitor")
            monitor_tls_health
            ;;
        "apply")
            local service="${2:-all}"
            apply_tls_config "$service"
            ;;
        "report")
            generate_tls_report
            ;;
        "dhparam")
            generate_dh_params
            ;;
        "help"|*)
            echo "TLS/SSL Configuration Manager for PA Ecosystem"
            echo ""
            echo "Usage: $0 <command> [options]"
            echo ""
            echo "Commands:"
            echo "  init                    Initialize TLS configuration system"
            echo "  generate [type]         Generate TLS configuration files (nginx|openssl|docker|all)"
            echo "  validate [file]         Validate TLS configuration file"
            echo "  test [domain] [port]    Test TLS configuration"
            echo "  monitor                 Monitor TLS health and security"
            echo "  apply [service]         Apply TLS configuration to services (nginx|docker|all)"
            echo "  report                  Generate TLS security report"
            echo "  dhparam                 Generate DH parameters"
            echo "  help                    Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0 init"
            echo "  $0 generate nginx"
            echo "  $0 validate /etc/nginx/conf.d/tls.conf"
            echo "  $0 test example.com 443"
            echo "  $0 monitor"
            echo "  $0 apply nginx"
            echo "  $0 report"
            ;;
    esac
}

# Run main function with all arguments
main "$@"
